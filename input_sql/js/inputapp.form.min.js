var val_sel;
var sum_leven;
var name_sel;
var importfile;
var stepped = 0,
chunks = 0,
rows = 0;
var start, end;
var handle;
var total_rows = 0;
var temp_array = new Array();
var foo = new Array();
var cur_index = 0;
var bAborted = false;
var uniq_values;
var similar_values;
var count = {
    thrash: 0,
    manual_fix:0,
    contacts: 0,
    manual_check: 0,
    dups: 0
};
//var sensivity = 0;
$(document).ready(function() {
    $("#abortButton").click(function() {
        stepped = 0;
        chunks = 0;
        rows = 0;
        if (handle != undefined) {
            handle.abort();
            $("#errormsg").html("<p class='text-error'>Converting database aborted.</p>");
            $("#convertprogress").css("width", "0%");
            cur_index = 0;
            bAborted = true
        }
        handle = undefined
    });
    $("#convertButton").click(function() {
            
        stepped = 0;
        chunks = 0;
        rows = 0;
        bAborted = false;
        sum_leven = $("#sum_leven")[0].value;
        if(Math.floor(sum_leven) == sum_leven && $.isNumeric(sum_leven)) {$("#leven_error").html("<p class='text-info'></p>");}
        else{ $("#leven_error").html("<p class='text-error'>Please enter the sum of levenshtein distance</p>"); return false;}
  
       
        importfile = $("#importfile")[0].value;
        
        uniq_values = $('input:checkbox:checked.group1').map(function () {
            return this.value;
        }).get();
        console.log(uniq_values);
        

        similar_values = $('input:checkbox:checked.group2').map(function () {
            return this.value;
        }).get();
        
         
        $('.sensivity :selected').each(function(i, selected){ 
            val_sel = $(selected).text();
            //val_sel = 'xsss';
            name_sel = $(selected).parents().eq(0).attr("name"); 
            foo[i] = name_sel+"="+val_sel;
  
        });
        
        $("#convertprogress").css("width", "0%");
        count.thrash = 0;
        count.manual_fix =0;
        count.contacts = 0;
        count.dups = 0;
        count.manual_check = 0;
        cur_index = 0;
        $("#recordinfomsg").text("");
        var b = $("#file")[0].files;
        console.log("check:",b)
        var a = buildConfigForGetRows();
        if (b.length > 0) {
            start = performance.now();
            $("#file").parse({
                config: a,
                before: function(c, d) {
                    console.log("Parsing file----:", c)
                },
                complete: function() {
                    console.log("Done with all files.")
                }
            })
        } else {
            console.log("File not selected:")
        }
    })
});

function buildConfigForGetRows() {
    return {
        delimiter: ";",
        header: true,
        step: undefined,
        worker: false,
        complete: completeFnForRows,
        error: errorFn
    }
}

function buildConfig() {
    return {
        delimiter: ";",
        header: true,
        worker: false,
        step: stepFn,
        complete: completeFn,
        error: errorFn,
        chunk: undefined
    }
}

function stepFn(results, parserHandle) {
   
    stepped++;
    rows += results.data.length;
    temp_array[cur_index] = results.data[0];
    cur_index++;
   
    if (cur_index == 1 || rows == total_rows) {
            
        cur_index = 0;
        handle = parserHandle;
        parserHandle.pause();
        $.post("input_contact.php", {
            IMPORTFILE: importfile,
            UNIQ: uniq_values,
            SIMILAR: similar_values,
            SUM_LEVEN: sum_leven,
            FOO: foo,
            DATA: temp_array
            
        }, function(data, status) {
            if (status == "success") {
                          
                var retVal = eval(data);
                count.thrash += retVal.data.thrash;
                count.manual_fix += retVal.data.manual_fix;
                count.dups += retVal.data.dups;
                count.contacts += retVal.data.contacts;
                count.manual_check += retVal.data.manual_check
            }
            $("#recordinfomsg").text("[thrash: " + count.thrash + " manual_fix: " + count.manual_fix +" contacts: " + count.contacts + " manual_check: " + count.manual_check + " dups: " + count.dups + "]");
            if (bAborted == false) {
                $("#errormsg").html("<p class='text-info'>Converting database... (" + (rows / total_rows * 100).toFixed(1) + "%)</p>");
                $("#convertprogress").css("width", (rows / total_rows * 100) + "%")
            }
            handle.resume()
        })
    }
}

function chunkFn(b, a) {
    if (!b) {
        return
    }
    chunks++;
    rows += b.data.length
}

function errorFn(a, b) {
    console.log("ERROR:", a, b)
}

function completeFnForRows() {
    end = performance.now();
    if (arguments[0] && arguments[0].data) {
        rows = arguments[0].data.length;
        total_rows = rows
    }
    console.log("Finished input (async). Time:", end - start, arguments);
    console.log("Rows:", rows, "Stepped:", stepped, "Chunks:", chunks);
    if (total_rows > 0) {
        start = performance.now();
        config = buildConfig();
        stepped = 0;
        chunks = 0;
        rows = 0;
        cur_index = 0;
        $("#file").parse({
            config: config,
            before: function(a, b) {
                $("#errormsg").html("<p class='text-info'>Converting database...</p>");
                console.log("Restart parsing:", a)
            },
            complete: function() {
                console.log("Done with all files.")
            }
        })
    }
}

function completeFn() {
    end = performance.now();
    $("#errormsg").html("<p class='text-info'>Successfully converted database.<br>(Time elapsed: " + (end - start) + "ms)</p>");
    if (arguments[0] && arguments[0].data) {
        rows = arguments[0].data.length;
        total_rows = rows
    }
    handle = undefined;
    console.log("Finished input (async). Time:", end - start, arguments);
    console.log("Rows:", rows, "Stepped:", stepped, "Chunks:", chunks)
};